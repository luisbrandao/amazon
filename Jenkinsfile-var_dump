// Fix BUILD_TAG for gitlab
env.BUILD_TAG = env.BUILD_TAG.replaceAll('%2F', '-').replaceAll('rentlambda-rentlambda','rentlambda').toLowerCase()


def getEnvironment(branchName) {
  appEnv = '';

  switch(branchName) {
    case 'integration':
      appEnv = 'development'
    break
    case 'stage':
      appEnv = 'stage'
      break
    case 'master':
    case 'production':
      appEnv = 'production'
    break
    case 'production-azul':
      appEnv = 'production-azul'
    break
    default:
      appEnv = 'test'
    break
  }

  return appEnv;
}

appName = 'site'
appRegion = 'sa-east-1'
appBucket = 'rentcars-builds-' + appRegion

properties([disableConcurrentBuilds(), pipelineTriggers([])])

node {
  clearBuilds()

  scmCheckout()

  doTest()

  parallelFor()
}

def clearBuilds() {
  stage("Clean previous builds") {
    deleteDir()
  }
}

def scmCheckout() {
  stage("Checkout") {
    checkout scm
  }
}

def doTest() {
  stage("Do test") {
    def repository = env.JOB_NAME.replaceAll(/\/PR-\d+/, '').toLowerCase()

    println "repository: " + repository

    println "env.BRANCH_NAME: " + env.BRANCH_NAME
    println "env.BUILD_TAG: " + env.BUILD_TAG
    println "env.JOB_NAME: " + env.JOB_NAME
    println "repository: " + repository
    println "env.GIT_BRANCH: " + env.GIT_BRANCH

    println "BUILD_NUMBER: " + BUILD_NUMBER
    println "BUILD_ID: " + BUILD_ID
    println "BUILD_URL: " + BUILD_URL
    println "NODE_NAME: " + NODE_NAME
    println "JOB_NAME: " + JOB_NAME
    println "BUILD_TAG: " + BUILD_TAG
    println "JENKINS_URL: " + JENKINS_URL
    println "EXECUTOR_NUMBER: " + EXECUTOR_NUMBER
    println "WORKSPACE: " + WORKSPACE

    println "Echo:"
    echo sh(script: 'env', returnStdout: true)
  }
}

def pretendToWork() {
  stage("Pretend to do work") {
    CDNEnv = getCDNEnv(getEnvironment(env.BRANCH_NAME))
    println "CDNEnv: " + CDNEnv

    sh "echo alfa ${CDNEnv}"
    sh "echo beta ${env.CDNEnv}"

    println "env.BUILD_TAG Depois: " + env.BUILD_TAG
  }
}

def parallelFor() {
  variables = ['alfa', 'beta', 'gama', 'delta', 'eta', 'lambda']

  for ( variable in variables ) {
    parallelStage(variable)
  }
}

def parallelStage (variable) {
  stage name: "Stage of ${variable}"
  println "Building stage: " + variable
  sleep 1
}
