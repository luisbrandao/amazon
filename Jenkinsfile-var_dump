// Fix BUILD_TAG for gitlab
env.BUILD_TAG = env.BUILD_TAG.replaceAll('%2F', '-').replaceAll('rentlambda-rentlambda','rentlambda').toLowerCase()

// Main variables (Do not modify, they are here just to be documented)
println "BUILD_TAG: " + BUILD_TAG
println "BRANCH_NAME: " + BRANCH_NAME
println "JOB_NAME: " + JOB_NAME
println "JOB_BASE_NAME " + JOB_BASE_NAME
println "BUILD_NUMBER: " + BUILD_NUMBER
println "BUILD_TAG: " + BUILD_TAG

// Common Defs
APP_NAME = 'site'
REGION = 'sa-east-1'
APP_BUCKET = "bucket-${REGION}"
DEPLOYTARGET = ['production', 'integration', 'stage']

// Environment-specifc variables
switch(JOB_BASE_NAME) {
  case 'master':
  case 'production':
    ENVIRONMENT = 'production'
    SYMFONYENV = 'prod'
  break
  case 'stage':
    ENVIRONMENT = 'stage'
    SYMFONYENV = 'homolog'
  break
  case 'integration':
    ENVIRONMENT = 'integration'
    SYMFONYENV = 'dev'
  break
}

properties([disableConcurrentBuilds(), pipelineTriggers([])])
node('php-7.0') {
  clearBuilds()

  scmCheckout()

  if (JOB_BASE_NAME =~ /PR-\d+/) {
    sonar()

  } else {
    if (JOB_BASE_NAME in DEPLOYTARGET) {
      gitVersionMaker()

      fetchSettings()

      installDependencies()

      compressArtifact()

      uploadArtifact()

      deploy()
    }
  }
}

def clearBuilds() {
  stage("Clean previous builds") {
    deleteDir()
  }
}

def scmCheckout() {
  stage("Checkout") {
    checkout scm
  }
}

def gitVersionMaker() {
  stage("Get git version") {
    sh '''#!/bin/bash

    tag=$(git tag | tail -1)
    head=$(git log -1 | awk \'NR==1\')
    heads=$(git log -1 --abbrev-commit  | awk \'NR==1\')
    hdate=$(git log -1 --abbrev-commit  | grep Date)
    date=$(date +"%H:%m - %Y-%m-%d")
    payload=$(git log -40 --abbrev-commit --oneline | sed 's/$/<br>/g')

    echo "A tag é ${tag}"
    echo "A short é ${heads}"
    echo "A head é ${head}"
    echo "A data da head é ${hdate}"
    echo "A data do build é ${date}"
    echo "Ambiente é ${ENVIRONMENT}"

    echo '<!DOCTYPE html>'                                      > ./web/rcdeprel.html
    echo '<html>'                                              >> ./web/rcdeprel.html
    echo ' <head>'                                             >> ./web/rcdeprel.html
    echo '   <meta charset="UTF-8">'                           >> ./web/rcdeprel.html
    echo '   <meta NAME="ROBOTS" CONTENT="NOINDEX, NOFOLLOW">' >> ./web/rcdeprel.html
    echo "   <title>${heads} - ${date}</title>"                >> ./web/rcdeprel.html
    echo ' </head>'                                            >> ./web/rcdeprel.html
    echo ' <body>'                                             >> ./web/rcdeprel.html
    echo "    <p> Tag da versão: ${tag} </p>"                  >> ./web/rcdeprel.html
    echo '    <p>'                                             >> ./web/rcdeprel.html
    echo "        branch: ${JOB_BASE_NAME} </br>"              >> ./web/rcdeprel.html
    echo '        head do git: </br>'                          >> ./web/rcdeprel.html
    echo "        Long: ${head} </br>"                         >> ./web/rcdeprel.html
    echo "        short: ${heads}"                             >> ./web/rcdeprel.html
    echo '    </p>'                                            >> ./web/rcdeprel.html
    echo "     <p> Data da head: ${hdate} </p>"                >> ./web/rcdeprel.html
    echo "     <p> Data do build: ${date} </p>"                >> ./web/rcdeprel.html
    echo '     <p> Log: </p>'                                  >> ./web/rcdeprel.html
    echo "     <p> ${payload} </p>"                            >> ./web/rcdeprel.html
    echo ' </body>'                                            >> ./web/rcdeprel.html
    echo '</html>'                                             >> ./web/rcdeprel.html
    '''
  }
}

def fetchSettings() {
  stage("Fetch settings from S3") {
    settingsBucket = "s3://Setings/${APP_NAME}/${ENVIRONMENT}"
    parallel config_prod:          { sh "aws s3 cp ${settingsBucket}/config_prod.yml              app/config/config_prod.yml" },
             config_legacy:        { sh "aws s3 cp ${settingsBucket}/config_legacy.yml            app/config/config_legacy.yml"},
             sitemaps:             { sh "aws s3 sync s3://Setings/site/sitemap web/"}
    failFast: true
  }
}

def sonar() {
  stage('SonarQube analysis') {
    def scannerHome = tool 'Sonar'
    def repository = JOB_NAME.replaceAll(/\/PR-\d+/, '').toLowerCase()

    withSonarQubeEnv('Sonar') {
      sh "${scannerHome}/bin/sonar-scanner ${env.SONAR_EXTRA_PROPS} -Dsonar.github.pullRequest=${env.CHANGE_ID} -Dsonar.github.repository=${repository}"
    }
  }
}

def installDependencies() {
  stage("Install Composer") {
    sh "SYMFONY_ENV=${SYMFONYENV} composer install"
    sh "composer dump-autoload --optimize --no-dev --classmap-authoritative"
  }

  stage("Install Npm") {
    nodejs(nodeJSInstallationName: 'node') {
      sh "npm install"
    }
  }

  stage("Install Gulp") {
    nodejs(nodeJSInstallationName: 'node') {
      sh "gulp --production" // For all environments
    }
  }
}

def compressArtifact() {
  stage("Compress artifact") {
    sh "tar cf ${BUILD_TAG}.tar * .devops --exclude-vcs"
    sh "gzip -9 ${BUILD_TAG}.tar"
  }
}

def uploadArtifact() {
  stage("Upload artifact") {
    step(
      [
        $class: 'S3BucketPublisher',
        entries: [
          [
            $class: 'Entry',
            bucket: "${APP_BUCKET}",
            flatten: true,
            sourceFile: "${BUILD_TAG}.tar.gz",
            managedArtifacts: true,
            selectedRegion: "${REGION}"
          ]
        ],
        dontWaitForConcurrentBuildCompletion: false,
        profileName: 'profilename',
        consoleLogLevel: 'INFO',
        pluginFailureResultConstraint: 'FAILURE'
      ]
    )
  }
}

def deploy() {
  stage("Deploy") {
    sh "aws deploy create-deployment --region ${REGION} " +
       "--application-name ${APP_NAME}" +
       " --deployment-group ${ENVIRONMENT} " +
       "--revision '{" +
       "  \"revisionType\": \"S3\"," +
       "  \"s3Location\": {" +
       "    \"bucket\": \"${APP_BUCKET}\"," +
       "    \"key\": \"jobs/${APP_NAME}/${BRANCH_NAME}/${BUILD_NUMBER}/${BUILD_TAG}.tar.gz\"," +
       "    \"bundleType\": \"tgz\"" +
       "  }" +
       "}' | tee output.json"
    sh "waitDeploy output.json ${REGION}"
  }
}
